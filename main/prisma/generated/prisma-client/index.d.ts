// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  country: (where?: CountryWhereInput) => Promise<boolean>;
  field: (where?: FieldWhereInput) => Promise<boolean>;
  interindex: (where?: InterindexWhereInput) => Promise<boolean>;
  method: (where?: MethodWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  country: (where: CountryWhereUniqueInput) => Country;
  countries: (
    args?: {
      where?: CountryWhereInput;
      orderBy?: CountryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<CountryNode>>;
  countriesConnection: (
    args?: {
      where?: CountryWhereInput;
      orderBy?: CountryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CountryConnection;
  field: (where: FieldWhereUniqueInput) => Field;
  fields: (
    args?: {
      where?: FieldWhereInput;
      orderBy?: FieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<FieldNode>>;
  fieldsConnection: (
    args?: {
      where?: FieldWhereInput;
      orderBy?: FieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FieldConnection;
  interindex: (where: InterindexWhereUniqueInput) => Interindex;
  interindexes: (
    args?: {
      where?: InterindexWhereInput;
      orderBy?: InterindexOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<InterindexNode>>;
  interindexesConnection: (
    args?: {
      where?: InterindexWhereInput;
      orderBy?: InterindexOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InterindexConnection;
  method: (where: MethodWhereUniqueInput) => Method;
  methods: (
    args?: {
      where?: MethodWhereInput;
      orderBy?: MethodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<MethodNode>>;
  methodsConnection: (
    args?: {
      where?: MethodWhereInput;
      orderBy?: MethodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MethodConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCountry: (data: CountryCreateInput) => Country;
  updateCountry: (
    args: { data: CountryUpdateInput; where: CountryWhereUniqueInput }
  ) => Country;
  updateManyCountries: (
    args: { data: CountryUpdateInput; where?: CountryWhereInput }
  ) => BatchPayload;
  upsertCountry: (
    args: {
      where: CountryWhereUniqueInput;
      create: CountryCreateInput;
      update: CountryUpdateInput;
    }
  ) => Country;
  deleteCountry: (where: CountryWhereUniqueInput) => Country;
  deleteManyCountries: (where?: CountryWhereInput) => BatchPayload;
  createField: (data: FieldCreateInput) => Field;
  updateField: (
    args: { data: FieldUpdateInput; where: FieldWhereUniqueInput }
  ) => Field;
  updateManyFields: (
    args: { data: FieldUpdateInput; where?: FieldWhereInput }
  ) => BatchPayload;
  upsertField: (
    args: {
      where: FieldWhereUniqueInput;
      create: FieldCreateInput;
      update: FieldUpdateInput;
    }
  ) => Field;
  deleteField: (where: FieldWhereUniqueInput) => Field;
  deleteManyFields: (where?: FieldWhereInput) => BatchPayload;
  createInterindex: (data: InterindexCreateInput) => Interindex;
  updateInterindex: (
    args: { data: InterindexUpdateInput; where: InterindexWhereUniqueInput }
  ) => Interindex;
  updateManyInterindexes: (
    args: { data: InterindexUpdateInput; where?: InterindexWhereInput }
  ) => BatchPayload;
  upsertInterindex: (
    args: {
      where: InterindexWhereUniqueInput;
      create: InterindexCreateInput;
      update: InterindexUpdateInput;
    }
  ) => Interindex;
  deleteInterindex: (where: InterindexWhereUniqueInput) => Interindex;
  deleteManyInterindexes: (where?: InterindexWhereInput) => BatchPayload;
  createMethod: (data: MethodCreateInput) => Method;
  updateMethod: (
    args: { data: MethodUpdateInput; where: MethodWhereUniqueInput }
  ) => Method;
  updateManyMethods: (
    args: { data: MethodUpdateInput; where?: MethodWhereInput }
  ) => BatchPayload;
  upsertMethod: (
    args: {
      where: MethodWhereUniqueInput;
      create: MethodCreateInput;
      update: MethodUpdateInput;
    }
  ) => Method;
  deleteMethod: (where: MethodWhereUniqueInput) => Method;
  deleteManyMethods: (where?: MethodWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  country: (
    where?: CountrySubscriptionWhereInput
  ) => CountrySubscriptionPayloadSubscription;
  field: (
    where?: FieldSubscriptionWhereInput
  ) => FieldSubscriptionPayloadSubscription;
  interindex: (
    where?: InterindexSubscriptionWhereInput
  ) => InterindexSubscriptionPayloadSubscription;
  method: (
    where?: MethodSubscriptionWhereInput
  ) => MethodSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CountryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gdppc2017_ASC"
  | "gdppc2017_DESC"
  | "incomelevel_ASC"
  | "incomelevel_DESC"
  | "iso2code_ASC"
  | "iso2code_DESC"
  | "iso3code_ASC"
  | "iso3code_DESC"
  | "lendingtype_ASC"
  | "lendingtype_DESC"
  | "pop2017_ASC"
  | "pop2017_DESC"
  | "region_ASC"
  | "region_DESC"
  | "wb_name_ASC"
  | "wb_name_DESC"
  | "name_ASC"
  | "name_DESC"
  | "totdocs_ASC"
  | "totdocs_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "level_ASC"
  | "level_DESC"
  | "scopus_code_ASC"
  | "scopus_code_DESC"
  | "scopus_name_ASC"
  | "scopus_name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InterindexOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "period_ASC"
  | "period_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MethodOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "minmax_ASC"
  | "minmax_DESC"
  | "short_name_ASC"
  | "short_name_DESC"
  | "full_name_ASC"
  | "full_name_DESC"
  | "short_desc_ASC"
  | "short_desc_DESC"
  | "long_desc_ASC"
  | "long_desc_DESC"
  | "formula_ASC"
  | "formula_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CountryCreateInput {
  gdppc2017?: Float;
  incomelevel?: String;
  iso2code?: String;
  iso3code?: String;
  lendingtype?: String;
  pop2017?: Int;
  region?: String;
  wb_name?: String;
  name: String;
  totdocs: Int;
}

export type CountryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface InterindexWhereInput {
  country_code?: CountryWhereInput;
  field_code?: FieldWhereInput;
  method_code?: MethodWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  period?: Int;
  period_not?: Int;
  period_in?: Int[] | Int;
  period_not_in?: Int[] | Int;
  period_lt?: Int;
  period_lte?: Int;
  period_gt?: Int;
  period_gte?: Int;
  value?: Float;
  value_not?: Float;
  value_in?: Float[] | Float;
  value_not_in?: Float[] | Float;
  value_lt?: Float;
  value_lte?: Float;
  value_gt?: Float;
  value_gte?: Float;
  AND?: InterindexWhereInput[] | InterindexWhereInput;
  OR?: InterindexWhereInput[] | InterindexWhereInput;
  NOT?: InterindexWhereInput[] | InterindexWhereInput;
}

export interface FieldCreateInput {
  name: String;
  level: String;
  scopus_code: String;
  scopus_name: String;
}

export interface MethodWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  minmax?: String;
  minmax_not?: String;
  minmax_in?: String[] | String;
  minmax_not_in?: String[] | String;
  minmax_lt?: String;
  minmax_lte?: String;
  minmax_gt?: String;
  minmax_gte?: String;
  minmax_contains?: String;
  minmax_not_contains?: String;
  minmax_starts_with?: String;
  minmax_not_starts_with?: String;
  minmax_ends_with?: String;
  minmax_not_ends_with?: String;
  short_name?: String;
  short_name_not?: String;
  short_name_in?: String[] | String;
  short_name_not_in?: String[] | String;
  short_name_lt?: String;
  short_name_lte?: String;
  short_name_gt?: String;
  short_name_gte?: String;
  short_name_contains?: String;
  short_name_not_contains?: String;
  short_name_starts_with?: String;
  short_name_not_starts_with?: String;
  short_name_ends_with?: String;
  short_name_not_ends_with?: String;
  full_name?: String;
  full_name_not?: String;
  full_name_in?: String[] | String;
  full_name_not_in?: String[] | String;
  full_name_lt?: String;
  full_name_lte?: String;
  full_name_gt?: String;
  full_name_gte?: String;
  full_name_contains?: String;
  full_name_not_contains?: String;
  full_name_starts_with?: String;
  full_name_not_starts_with?: String;
  full_name_ends_with?: String;
  full_name_not_ends_with?: String;
  short_desc?: String;
  short_desc_not?: String;
  short_desc_in?: String[] | String;
  short_desc_not_in?: String[] | String;
  short_desc_lt?: String;
  short_desc_lte?: String;
  short_desc_gt?: String;
  short_desc_gte?: String;
  short_desc_contains?: String;
  short_desc_not_contains?: String;
  short_desc_starts_with?: String;
  short_desc_not_starts_with?: String;
  short_desc_ends_with?: String;
  short_desc_not_ends_with?: String;
  long_desc?: String;
  long_desc_not?: String;
  long_desc_in?: String[] | String;
  long_desc_not_in?: String[] | String;
  long_desc_lt?: String;
  long_desc_lte?: String;
  long_desc_gt?: String;
  long_desc_gte?: String;
  long_desc_contains?: String;
  long_desc_not_contains?: String;
  long_desc_starts_with?: String;
  long_desc_not_starts_with?: String;
  long_desc_ends_with?: String;
  long_desc_not_ends_with?: String;
  formula?: String;
  formula_not?: String;
  formula_in?: String[] | String;
  formula_not_in?: String[] | String;
  formula_lt?: String;
  formula_lte?: String;
  formula_gt?: String;
  formula_gte?: String;
  formula_contains?: String;
  formula_not_contains?: String;
  formula_starts_with?: String;
  formula_not_starts_with?: String;
  formula_ends_with?: String;
  formula_not_ends_with?: String;
  AND?: MethodWhereInput[] | MethodWhereInput;
  OR?: MethodWhereInput[] | MethodWhereInput;
  NOT?: MethodWhereInput[] | MethodWhereInput;
}

export interface CountryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gdppc2017?: Float;
  gdppc2017_not?: Float;
  gdppc2017_in?: Float[] | Float;
  gdppc2017_not_in?: Float[] | Float;
  gdppc2017_lt?: Float;
  gdppc2017_lte?: Float;
  gdppc2017_gt?: Float;
  gdppc2017_gte?: Float;
  incomelevel?: String;
  incomelevel_not?: String;
  incomelevel_in?: String[] | String;
  incomelevel_not_in?: String[] | String;
  incomelevel_lt?: String;
  incomelevel_lte?: String;
  incomelevel_gt?: String;
  incomelevel_gte?: String;
  incomelevel_contains?: String;
  incomelevel_not_contains?: String;
  incomelevel_starts_with?: String;
  incomelevel_not_starts_with?: String;
  incomelevel_ends_with?: String;
  incomelevel_not_ends_with?: String;
  iso2code?: String;
  iso2code_not?: String;
  iso2code_in?: String[] | String;
  iso2code_not_in?: String[] | String;
  iso2code_lt?: String;
  iso2code_lte?: String;
  iso2code_gt?: String;
  iso2code_gte?: String;
  iso2code_contains?: String;
  iso2code_not_contains?: String;
  iso2code_starts_with?: String;
  iso2code_not_starts_with?: String;
  iso2code_ends_with?: String;
  iso2code_not_ends_with?: String;
  iso3code?: String;
  iso3code_not?: String;
  iso3code_in?: String[] | String;
  iso3code_not_in?: String[] | String;
  iso3code_lt?: String;
  iso3code_lte?: String;
  iso3code_gt?: String;
  iso3code_gte?: String;
  iso3code_contains?: String;
  iso3code_not_contains?: String;
  iso3code_starts_with?: String;
  iso3code_not_starts_with?: String;
  iso3code_ends_with?: String;
  iso3code_not_ends_with?: String;
  lendingtype?: String;
  lendingtype_not?: String;
  lendingtype_in?: String[] | String;
  lendingtype_not_in?: String[] | String;
  lendingtype_lt?: String;
  lendingtype_lte?: String;
  lendingtype_gt?: String;
  lendingtype_gte?: String;
  lendingtype_contains?: String;
  lendingtype_not_contains?: String;
  lendingtype_starts_with?: String;
  lendingtype_not_starts_with?: String;
  lendingtype_ends_with?: String;
  lendingtype_not_ends_with?: String;
  pop2017?: Int;
  pop2017_not?: Int;
  pop2017_in?: Int[] | Int;
  pop2017_not_in?: Int[] | Int;
  pop2017_lt?: Int;
  pop2017_lte?: Int;
  pop2017_gt?: Int;
  pop2017_gte?: Int;
  region?: String;
  region_not?: String;
  region_in?: String[] | String;
  region_not_in?: String[] | String;
  region_lt?: String;
  region_lte?: String;
  region_gt?: String;
  region_gte?: String;
  region_contains?: String;
  region_not_contains?: String;
  region_starts_with?: String;
  region_not_starts_with?: String;
  region_ends_with?: String;
  region_not_ends_with?: String;
  wb_name?: String;
  wb_name_not?: String;
  wb_name_in?: String[] | String;
  wb_name_not_in?: String[] | String;
  wb_name_lt?: String;
  wb_name_lte?: String;
  wb_name_gt?: String;
  wb_name_gte?: String;
  wb_name_contains?: String;
  wb_name_not_contains?: String;
  wb_name_starts_with?: String;
  wb_name_not_starts_with?: String;
  wb_name_ends_with?: String;
  wb_name_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  totdocs?: Int;
  totdocs_not?: Int;
  totdocs_in?: Int[] | Int;
  totdocs_not_in?: Int[] | Int;
  totdocs_lt?: Int;
  totdocs_lte?: Int;
  totdocs_gt?: Int;
  totdocs_gte?: Int;
  AND?: CountryWhereInput[] | CountryWhereInput;
  OR?: CountryWhereInput[] | CountryWhereInput;
  NOT?: CountryWhereInput[] | CountryWhereInput;
}

export interface CountryUpsertNestedInput {
  update: CountryUpdateDataInput;
  create: CountryCreateInput;
}

export interface InterindexSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InterindexWhereInput;
  AND?: InterindexSubscriptionWhereInput[] | InterindexSubscriptionWhereInput;
  OR?: InterindexSubscriptionWhereInput[] | InterindexSubscriptionWhereInput;
  NOT?: InterindexSubscriptionWhereInput[] | InterindexSubscriptionWhereInput;
}

export interface CountryUpdateDataInput {
  gdppc2017?: Float;
  incomelevel?: String;
  iso2code?: String;
  iso3code?: String;
  lendingtype?: String;
  pop2017?: Int;
  region?: String;
  wb_name?: String;
  name?: String;
  totdocs?: Int;
}

export interface CountrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CountryWhereInput;
  AND?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput;
  OR?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput;
  NOT?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput;
}

export interface CountryUpdateOneRequiredInput {
  create?: CountryCreateInput;
  update?: CountryUpdateDataInput;
  upsert?: CountryUpsertNestedInput;
  connect?: CountryWhereUniqueInput;
}

export interface MethodUpdateInput {
  minmax?: String;
  short_name?: String;
  full_name?: String;
  short_desc?: String;
  long_desc?: String;
  formula?: String;
}

export interface InterindexUpdateInput {
  country_code?: CountryUpdateOneRequiredInput;
  field_code?: FieldUpdateOneRequiredInput;
  method_code?: MethodUpdateOneRequiredInput;
  period?: Int;
  value?: Float;
}

export interface MethodUpsertNestedInput {
  update: MethodUpdateDataInput;
  create: MethodCreateInput;
}

export type MethodWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MethodUpdateOneRequiredInput {
  create?: MethodCreateInput;
  update?: MethodUpdateDataInput;
  upsert?: MethodUpsertNestedInput;
  connect?: MethodWhereUniqueInput;
}

export interface MethodCreateInput {
  minmax: String;
  short_name: String;
  full_name: String;
  short_desc?: String;
  long_desc?: String;
  formula?: String;
}

export type InterindexWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MethodCreateOneInput {
  create?: MethodCreateInput;
  connect?: MethodWhereUniqueInput;
}

export interface FieldUpdateOneRequiredInput {
  create?: FieldCreateInput;
  update?: FieldUpdateDataInput;
  upsert?: FieldUpsertNestedInput;
  connect?: FieldWhereUniqueInput;
}

export interface FieldCreateOneInput {
  create?: FieldCreateInput;
  connect?: FieldWhereUniqueInput;
}

export interface FieldSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FieldWhereInput;
  AND?: FieldSubscriptionWhereInput[] | FieldSubscriptionWhereInput;
  OR?: FieldSubscriptionWhereInput[] | FieldSubscriptionWhereInput;
  NOT?: FieldSubscriptionWhereInput[] | FieldSubscriptionWhereInput;
}

export interface CountryCreateOneInput {
  create?: CountryCreateInput;
  connect?: CountryWhereUniqueInput;
}

export interface FieldWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  level?: String;
  level_not?: String;
  level_in?: String[] | String;
  level_not_in?: String[] | String;
  level_lt?: String;
  level_lte?: String;
  level_gt?: String;
  level_gte?: String;
  level_contains?: String;
  level_not_contains?: String;
  level_starts_with?: String;
  level_not_starts_with?: String;
  level_ends_with?: String;
  level_not_ends_with?: String;
  scopus_code?: String;
  scopus_code_not?: String;
  scopus_code_in?: String[] | String;
  scopus_code_not_in?: String[] | String;
  scopus_code_lt?: String;
  scopus_code_lte?: String;
  scopus_code_gt?: String;
  scopus_code_gte?: String;
  scopus_code_contains?: String;
  scopus_code_not_contains?: String;
  scopus_code_starts_with?: String;
  scopus_code_not_starts_with?: String;
  scopus_code_ends_with?: String;
  scopus_code_not_ends_with?: String;
  scopus_name?: String;
  scopus_name_not?: String;
  scopus_name_in?: String[] | String;
  scopus_name_not_in?: String[] | String;
  scopus_name_lt?: String;
  scopus_name_lte?: String;
  scopus_name_gt?: String;
  scopus_name_gte?: String;
  scopus_name_contains?: String;
  scopus_name_not_contains?: String;
  scopus_name_starts_with?: String;
  scopus_name_not_starts_with?: String;
  scopus_name_ends_with?: String;
  scopus_name_not_ends_with?: String;
  AND?: FieldWhereInput[] | FieldWhereInput;
  OR?: FieldWhereInput[] | FieldWhereInput;
  NOT?: FieldWhereInput[] | FieldWhereInput;
}

export interface FieldUpsertNestedInput {
  update: FieldUpdateDataInput;
  create: FieldCreateInput;
}

export interface FieldUpdateInput {
  name?: String;
  level?: String;
  scopus_code?: String;
  scopus_name?: String;
}

export interface CountryUpdateInput {
  gdppc2017?: Float;
  incomelevel?: String;
  iso2code?: String;
  iso3code?: String;
  lendingtype?: String;
  pop2017?: Int;
  region?: String;
  wb_name?: String;
  name?: String;
  totdocs?: Int;
}

export interface InterindexCreateInput {
  country_code: CountryCreateOneInput;
  field_code: FieldCreateOneInput;
  method_code: MethodCreateOneInput;
  period: Int;
  value?: Float;
}

export interface FieldUpdateDataInput {
  name?: String;
  level?: String;
  scopus_code?: String;
  scopus_name?: String;
}

export interface MethodUpdateDataInput {
  minmax?: String;
  short_name?: String;
  full_name?: String;
  short_desc?: String;
  long_desc?: String;
  formula?: String;
}

export type FieldWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MethodSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MethodWhereInput;
  AND?: MethodSubscriptionWhereInput[] | MethodSubscriptionWhereInput;
  OR?: MethodSubscriptionWhereInput[] | MethodSubscriptionWhereInput;
  NOT?: MethodSubscriptionWhereInput[] | MethodSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface MethodPreviousValuesNode {
  id: ID_Output;
  minmax: String;
  short_name: String;
  full_name: String;
  short_desc?: String;
  long_desc?: String;
  formula?: String;
}

export interface MethodPreviousValues
  extends Promise<MethodPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  minmax: () => Promise<String>;
  short_name: () => Promise<String>;
  full_name: () => Promise<String>;
  short_desc: () => Promise<String>;
  long_desc: () => Promise<String>;
  formula: () => Promise<String>;
}

export interface MethodPreviousValuesSubscription
  extends Promise<AsyncIterator<MethodPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  minmax: () => Promise<AsyncIterator<String>>;
  short_name: () => Promise<AsyncIterator<String>>;
  full_name: () => Promise<AsyncIterator<String>>;
  short_desc: () => Promise<AsyncIterator<String>>;
  long_desc: () => Promise<AsyncIterator<String>>;
  formula: () => Promise<AsyncIterator<String>>;
}

export interface FieldConnectionNode {}

export interface FieldConnection
  extends Promise<FieldConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<FieldEdgeNode>>>() => T;
  aggregate: <T = AggregateField>() => T;
}

export interface FieldConnectionSubscription
  extends Promise<AsyncIterator<FieldConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<FieldEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateFieldSubscription>() => T;
}

export interface CountryConnectionNode {}

export interface CountryConnection
  extends Promise<CountryConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<CountryEdgeNode>>>() => T;
  aggregate: <T = AggregateCountry>() => T;
}

export interface CountryConnectionSubscription
  extends Promise<AsyncIterator<CountryConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<CountryEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateCountrySubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface InterindexSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface InterindexSubscriptionPayload
  extends Promise<InterindexSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Interindex>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InterindexPreviousValues>() => T;
}

export interface InterindexSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InterindexSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InterindexSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InterindexPreviousValuesSubscription>() => T;
}

export interface AggregateMethodNode {
  count: Int;
}

export interface AggregateMethod
  extends Promise<AggregateMethodNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMethodSubscription
  extends Promise<AsyncIterator<AggregateMethodNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MethodConnectionNode {}

export interface MethodConnection
  extends Promise<MethodConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<MethodEdgeNode>>>() => T;
  aggregate: <T = AggregateMethod>() => T;
}

export interface MethodConnectionSubscription
  extends Promise<AsyncIterator<MethodConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<MethodEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateMethodSubscription>() => T;
}

export interface FieldNode {
  id: ID_Output;
  name: String;
  level: String;
  scopus_code: String;
  scopus_name: String;
}

export interface Field extends Promise<FieldNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  level: () => Promise<String>;
  scopus_code: () => Promise<String>;
  scopus_name: () => Promise<String>;
}

export interface FieldSubscription
  extends Promise<AsyncIterator<FieldNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<String>>;
  scopus_code: () => Promise<AsyncIterator<String>>;
  scopus_name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInterindexNode {
  count: Int;
}

export interface AggregateInterindex
  extends Promise<AggregateInterindexNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInterindexSubscription
  extends Promise<AsyncIterator<AggregateInterindexNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCountryNode {
  count: Int;
}

export interface AggregateCountry
  extends Promise<AggregateCountryNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCountrySubscription
  extends Promise<AsyncIterator<AggregateCountryNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InterindexConnectionNode {}

export interface InterindexConnection
  extends Promise<InterindexConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<InterindexEdgeNode>>>() => T;
  aggregate: <T = AggregateInterindex>() => T;
}

export interface InterindexConnectionSubscription
  extends Promise<AsyncIterator<InterindexConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<InterindexEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateInterindexSubscription>() => T;
}

export interface CountryNode {
  id: ID_Output;
  gdppc2017?: Float;
  incomelevel?: String;
  iso2code?: String;
  iso3code?: String;
  lendingtype?: String;
  pop2017?: Int;
  region?: String;
  wb_name?: String;
  name: String;
  totdocs: Int;
}

export interface Country extends Promise<CountryNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  gdppc2017: () => Promise<Float>;
  incomelevel: () => Promise<String>;
  iso2code: () => Promise<String>;
  iso3code: () => Promise<String>;
  lendingtype: () => Promise<String>;
  pop2017: () => Promise<Int>;
  region: () => Promise<String>;
  wb_name: () => Promise<String>;
  name: () => Promise<String>;
  totdocs: () => Promise<Int>;
}

export interface CountrySubscription
  extends Promise<AsyncIterator<CountryNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gdppc2017: () => Promise<AsyncIterator<Float>>;
  incomelevel: () => Promise<AsyncIterator<String>>;
  iso2code: () => Promise<AsyncIterator<String>>;
  iso3code: () => Promise<AsyncIterator<String>>;
  lendingtype: () => Promise<AsyncIterator<String>>;
  pop2017: () => Promise<AsyncIterator<Int>>;
  region: () => Promise<AsyncIterator<String>>;
  wb_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  totdocs: () => Promise<AsyncIterator<Int>>;
}

export interface MethodNode {
  id: ID_Output;
  minmax: String;
  short_name: String;
  full_name: String;
  short_desc?: String;
  long_desc?: String;
  formula?: String;
}

export interface Method extends Promise<MethodNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  minmax: () => Promise<String>;
  short_name: () => Promise<String>;
  full_name: () => Promise<String>;
  short_desc: () => Promise<String>;
  long_desc: () => Promise<String>;
  formula: () => Promise<String>;
}

export interface MethodSubscription
  extends Promise<AsyncIterator<MethodNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  minmax: () => Promise<AsyncIterator<String>>;
  short_name: () => Promise<AsyncIterator<String>>;
  full_name: () => Promise<AsyncIterator<String>>;
  short_desc: () => Promise<AsyncIterator<String>>;
  long_desc: () => Promise<AsyncIterator<String>>;
  formula: () => Promise<AsyncIterator<String>>;
}

export interface CountrySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CountrySubscriptionPayload
  extends Promise<CountrySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Country>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CountryPreviousValues>() => T;
}

export interface CountrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CountrySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CountrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CountryPreviousValuesSubscription>() => T;
}

export interface AggregateFieldNode {
  count: Int;
}

export interface AggregateField
  extends Promise<AggregateFieldNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFieldSubscription
  extends Promise<AsyncIterator<AggregateFieldNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CountryPreviousValuesNode {
  id: ID_Output;
  gdppc2017?: Float;
  incomelevel?: String;
  iso2code?: String;
  iso3code?: String;
  lendingtype?: String;
  pop2017?: Int;
  region?: String;
  wb_name?: String;
  name: String;
  totdocs: Int;
}

export interface CountryPreviousValues
  extends Promise<CountryPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gdppc2017: () => Promise<Float>;
  incomelevel: () => Promise<String>;
  iso2code: () => Promise<String>;
  iso3code: () => Promise<String>;
  lendingtype: () => Promise<String>;
  pop2017: () => Promise<Int>;
  region: () => Promise<String>;
  wb_name: () => Promise<String>;
  name: () => Promise<String>;
  totdocs: () => Promise<Int>;
}

export interface CountryPreviousValuesSubscription
  extends Promise<AsyncIterator<CountryPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gdppc2017: () => Promise<AsyncIterator<Float>>;
  incomelevel: () => Promise<AsyncIterator<String>>;
  iso2code: () => Promise<AsyncIterator<String>>;
  iso3code: () => Promise<AsyncIterator<String>>;
  lendingtype: () => Promise<AsyncIterator<String>>;
  pop2017: () => Promise<AsyncIterator<Int>>;
  region: () => Promise<AsyncIterator<String>>;
  wb_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  totdocs: () => Promise<AsyncIterator<Int>>;
}

export interface MethodEdgeNode {
  cursor: String;
}

export interface MethodEdge extends Promise<MethodEdgeNode>, Fragmentable {
  node: <T = Method>() => T;
  cursor: () => Promise<String>;
}

export interface MethodEdgeSubscription
  extends Promise<AsyncIterator<MethodEdgeNode>>,
    Fragmentable {
  node: <T = MethodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InterindexPreviousValuesNode {
  id: ID_Output;
  period: Int;
  value?: Float;
}

export interface InterindexPreviousValues
  extends Promise<InterindexPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: () => Promise<Int>;
  value: () => Promise<Float>;
}

export interface InterindexPreviousValuesSubscription
  extends Promise<AsyncIterator<InterindexPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<Float>>;
}

export interface FieldPreviousValuesNode {
  id: ID_Output;
  name: String;
  level: String;
  scopus_code: String;
  scopus_name: String;
}

export interface FieldPreviousValues
  extends Promise<FieldPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  level: () => Promise<String>;
  scopus_code: () => Promise<String>;
  scopus_name: () => Promise<String>;
}

export interface FieldPreviousValuesSubscription
  extends Promise<AsyncIterator<FieldPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<String>>;
  scopus_code: () => Promise<AsyncIterator<String>>;
  scopus_name: () => Promise<AsyncIterator<String>>;
}

export interface FieldSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FieldSubscriptionPayload
  extends Promise<FieldSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Field>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FieldPreviousValues>() => T;
}

export interface FieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FieldSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FieldPreviousValuesSubscription>() => T;
}

export interface CountryEdgeNode {
  cursor: String;
}

export interface CountryEdge extends Promise<CountryEdgeNode>, Fragmentable {
  node: <T = Country>() => T;
  cursor: () => Promise<String>;
}

export interface CountryEdgeSubscription
  extends Promise<AsyncIterator<CountryEdgeNode>>,
    Fragmentable {
  node: <T = CountrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MethodSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MethodSubscriptionPayload
  extends Promise<MethodSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Method>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MethodPreviousValues>() => T;
}

export interface MethodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MethodSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MethodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MethodPreviousValuesSubscription>() => T;
}

export interface FieldEdgeNode {
  cursor: String;
}

export interface FieldEdge extends Promise<FieldEdgeNode>, Fragmentable {
  node: <T = Field>() => T;
  cursor: () => Promise<String>;
}

export interface FieldEdgeSubscription
  extends Promise<AsyncIterator<FieldEdgeNode>>,
    Fragmentable {
  node: <T = FieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InterindexNode {
  id: ID_Output;
  period: Int;
  value?: Float;
}

export interface Interindex extends Promise<InterindexNode>, Fragmentable {
  country_code: <T = Country>() => T;
  field_code: <T = Field>() => T;
  method_code: <T = Method>() => T;
  id: () => Promise<ID_Output>;
  period: () => Promise<Int>;
  value: () => Promise<Float>;
}

export interface InterindexSubscription
  extends Promise<AsyncIterator<InterindexNode>>,
    Fragmentable {
  country_code: <T = CountrySubscription>() => T;
  field_code: <T = FieldSubscription>() => T;
  method_code: <T = MethodSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<Float>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface InterindexEdgeNode {
  cursor: String;
}

export interface InterindexEdge
  extends Promise<InterindexEdgeNode>,
    Fragmentable {
  node: <T = Interindex>() => T;
  cursor: () => Promise<String>;
}

export interface InterindexEdgeSubscription
  extends Promise<AsyncIterator<InterindexEdgeNode>>,
    Fragmentable {
  node: <T = InterindexSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Type Defs
 */

export const prisma: Prisma;
